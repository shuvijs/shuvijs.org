"use strict";(self.webpackChunkshuvi_document=self.webpackChunkshuvi_document||[]).push([[1048],{9613:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return k}});var a=n(9496);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(n),k=i,m=c["".concat(p,".").concat(k)]||c[k]||d[k]||r;return n?a.createElement(m,l(l({ref:t},s),{},{components:n})):a.createElement(m,l({ref:t},s))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5960:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return d}});var a=n(2848),i=n(9213),r=(n(9496),n(9613)),l=["components"],o={id:"corePlugin-api",title:"CorePlugin API",sidebar_position:1},p=void 0,u={unversionedId:"api-reference/plugin/corePlugin-api",id:"api-reference/plugin/corePlugin-api",title:"CorePlugin API",description:"To create a corePlugin, use",source:"@site/docs/api-reference/plugin/corePlugin-api.md",sourceDirName:"api-reference/plugin",slug:"/api-reference/plugin/corePlugin-api",permalink:"/shuvijs.org/docs/api-reference/plugin/corePlugin-api",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-reference/plugin/corePlugin-api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"corePlugin-api",title:"CorePlugin API",sidebar_position:1},sidebar:"apiReferenceSidebar",previous:{title:"Hook API",permalink:"/shuvijs.org/docs/api-reference/plugin/hook-api"},next:{title:"ServerPlugin API",permalink:"/shuvijs.org/docs/api-reference/plugin/serverPlugin-api"}},s={},d=[{value:"Context",id:"context",level:2},{value:"<code>mode</code>",id:"mode",level:4},{value:"<code>paths</code>",id:"paths",level:4},{value:"<code>config</code>",id:"config",level:4},{value:"<code>phase</code>",id:"phase",level:4},{value:"assetPublicPath",id:"assetpublicpath",level:3},{value:"<code>pluginRunner</code>",id:"pluginrunner",level:4},{value:"<code>resolveAppFile</code>",id:"resolveappfile",level:4},{value:"<code>resolveUserFile</code>",id:"resolveuserfile",level:4},{value:"<code>resolveBuildFile</code>",id:"resolvebuildfile",level:4},{value:"<code>resolvePublicFile</code>",id:"resolvepublicfile",level:4},{value:"<code>getAssetPublicUrl</code>",id:"getassetpublicurl",level:4},{value:"Hooks",id:"hooks",level:2},{value:"<code>afterInit</code>",id:"afterinit",level:3},{value:"<code>afterBuild</code>",id:"afterbuild",level:3},{value:"<code>afterDestroy</code>",id:"afterdestroy",level:3},{value:"<code>afterBundlerDone</code>",id:"afterbundlerdone",level:3},{value:"<code>afterBundlerTargetDone</code>",id:"afterbundlertargetdone",level:3},{value:"<code>configWebpack</code>",id:"configwebpack",level:3},{value:"<code>addExtraTarget</code>",id:"addextratarget",level:3},{value:"<code>addResource</code>",id:"addresource",level:3},{value:"<code>addRuntimeFile</code>",id:"addruntimefile",level:3},{value:"<code>addRuntimeService</code>",id:"addruntimeservice",level:3},{value:"<code>appRoutes</code>",id:"approutes",level:3},{value:"Extending types",id:"extending-types",level:2}],c={toc:d};function k(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To create a corePlugin, use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createCorePlugin } from 'shuvi'\n")),(0,r.kt)("h2",{id:"context"},"Context"),(0,r.kt)("p",null,"The context stores a series of useful data and utils and can be visit in the last parameter of every hook handler. "),(0,r.kt)("h4",{id:"mode"},(0,r.kt)("inlineCode",{parentName:"h4"},"mode")),(0,r.kt)("p",null,"Current NodeEnv mode"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: ",(0,r.kt)("inlineCode",{parentName:"li"},"'development' | 'production'"))),(0,r.kt)("h4",{id:"paths"},(0,r.kt)("inlineCode",{parentName:"h4"},"paths")),(0,r.kt)("p",null,"A series of path viriables."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: ",(0,r.kt)("inlineCode",{parentName:"li"},"IPaths"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface IPaths {\n  rootDir: string;\n  buildDir: string;\n  // dir to store shuvi's artifacts\n  privateDir: string;\n  // dir to store shuvi generated src files\n  appDir: string;\n  // dir to runtime libraries\n  runtimeDir: string;\n  //resources file\n  resources: string;\n  // user src dir\n  srcDir: string;\n  // functional dirs\n  pagesDir: string;\n  // api dirs\n  apisDir: string;\n  publicDir: string;\n}\n")))),(0,r.kt)("h4",{id:"config"},(0,r.kt)("inlineCode",{parentName:"h4"},"config")),(0,r.kt)("p",null,"Current shuvi config"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: ",(0,r.kt)("a",{parentName:"li",href:"/shuvijs.org/docs/api-reference/config"},"API Reference / shuvi.config.js"))),(0,r.kt)("h4",{id:"phase"},(0,r.kt)("inlineCode",{parentName:"h4"},"phase")),(0,r.kt)("p",null,"Current working phase"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type IPhase =\n| 'PHASE_PRODUCTION_BUILD'\n| 'PHASE_PRODUCTION_SERVER'\n| 'PHASE_DEVELOPMENT_SERVER'\n| 'PHASE_INSPECT_WEBPACK'\n")))),(0,r.kt)("h3",{id:"assetpublicpath"},"assetPublicPath"),(0,r.kt)("p",null,"publicPath"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type: ",(0,r.kt)("inlineCode",{parentName:"li"},"string"))),(0,r.kt)("h4",{id:"pluginrunner"},(0,r.kt)("inlineCode",{parentName:"h4"},"pluginRunner")),(0,r.kt)("p",null,"An object containing every hook runner."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"context.pluginRunner[hookName]()              // if initialValue and extraArg are void\ncontext.pluginRunner[hookName](extraArg)      // if initialValue is void\ncontext.pluginRunner[hookName](initialValue)  // if extraArg is void\n")),(0,r.kt)("h4",{id:"resolveappfile"},(0,r.kt)("inlineCode",{parentName:"h4"},"resolveAppFile")),(0,r.kt)("p",null,"A util method a resolve files under ",(0,r.kt)("inlineCode",{parentName:"p"},"paths.appDir"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(...paths: string[]) => string\n")))),(0,r.kt)("h4",{id:"resolveuserfile"},(0,r.kt)("inlineCode",{parentName:"h4"},"resolveUserFile")),(0,r.kt)("p",null,"A util method a resolve files under ",(0,r.kt)("inlineCode",{parentName:"p"},"paths.srcDir"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(...paths: string[]) => string\n")))),(0,r.kt)("h4",{id:"resolvebuildfile"},(0,r.kt)("inlineCode",{parentName:"h4"},"resolveBuildFile")),(0,r.kt)("p",null,"A util method a resolve files under ",(0,r.kt)("inlineCode",{parentName:"p"},"paths.buildDir"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(...paths: string[]) => string\n")))),(0,r.kt)("h4",{id:"resolvepublicfile"},(0,r.kt)("inlineCode",{parentName:"h4"},"resolvePublicFile")),(0,r.kt)("p",null,"A util method a resolve files under ",(0,r.kt)("inlineCode",{parentName:"p"},"paths.publicDir"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(...paths: string[]) => string\n")))),(0,r.kt)("h4",{id:"getassetpublicurl"},(0,r.kt)("inlineCode",{parentName:"h4"},"getAssetPublicUrl")),(0,r.kt)("p",null,"A util method a resolve files under ",(0,r.kt)("inlineCode",{parentName:"p"},"assetPublicPath"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"type:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"(...paths: string[]) => string\n")))),(0,r.kt)("h2",{id:"hooks"},"Hooks"),(0,r.kt)("h3",{id:"afterinit"},(0,r.kt)("inlineCode",{parentName:"h3"},"afterInit")),(0,r.kt)("p",null,"will be executed after internal api initializes."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void"))),(0,r.kt)("h3",{id:"afterbuild"},(0,r.kt)("inlineCode",{parentName:"h3"},"afterBuild")),(0,r.kt)("p",null,"will be executed after ",(0,r.kt)("inlineCode",{parentName:"p"},"shuvi build")," is done."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("h3",{id:"afterdestroy"},(0,r.kt)("inlineCode",{parentName:"h3"},"afterDestroy")),(0,r.kt)("p",null,"will be executed after shuvi process ends."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"})),(0,r.kt)("h3",{id:"afterbundlerdone"},(0,r.kt)("inlineCode",{parentName:"h3"},"afterBundlerDone")),(0,r.kt)("p",null,"will be executed after all webpack bundler target are done."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"BundlerDoneExtra"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type BundlerDoneExtra = {\n  first: boolean;\n  stats: webpack.MultiStats;\n};\n"))),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void"))),(0,r.kt)("h3",{id:"afterbundlertargetdone"},(0,r.kt)("inlineCode",{parentName:"h3"},"afterBundlerTargetDone")),(0,r.kt)("p",null,"will be executed after each webpack bundler target is done."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"BundlerTargetDoneExtra"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type BundlerTargetDoneExtra = {\n  first: boolean;\n  name: string;\n  stats: webpack.Stats;\n};\n"))),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void"))),(0,r.kt)("h3",{id:"configwebpack"},(0,r.kt)("inlineCode",{parentName:"h3"},"configWebpack")),(0,r.kt)("p",null,"Will be executed at bundler initializing to config every webpack bundler target. Different targets can be identified by ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncSeriesWaterfallHook"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"p"},"WebpackChain"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigWebpackAssistant")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ConfigWebpackAssistant = {\n  name: string;\n  mode: 'development' | 'production';\n  webpack: Webpack;\n  helpers: {\n    addExternals: (chain: WebpackChain, externalsFn: ExternalsFunction) => void;\n  };\n};\n\ntype ExternalsFunction = (\n  data: { context: string; request: string },\n  callback: (err: Error | null, result: string | undefined) => void\n) => void;\n")))),(0,r.kt)("h3",{id:"addextratarget"},(0,r.kt)("inlineCode",{parentName:"h3"},"addExtraTarget")),(0,r.kt)("p",null,"Add extra webpack bundler target."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncParallelHook"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"p"},"ExtraTargetAssistant")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type ExtraTargetAssistant = {\n  createConfig(options: IWebpackConfigOptions): WebpackChain;\n  mode: 'development' | 'production';\n  webpack: Webpack;\n};\n\ninterface IWebpackConfigOptions {\n  name: string;\n  node: boolean;\n  entry: {\n    [x: string]: string | string[];\n  };\n  include?: string[];\n  outputDir: string;\n  webpackHelpers: {\n    addExternals: (chain: WebpackChain, externalsFn: ExternalsFunction) => void;\n  };;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"p"},"void"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"returnType: ",(0,r.kt)("inlineCode",{parentName:"p"},"Target")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Target {\n  name: string;\n  chain: WebpackChain;\n}\n")))),(0,r.kt)("h3",{id:"addresource"},(0,r.kt)("inlineCode",{parentName:"h3"},"addResource")),(0,r.kt)("p",null,"To add runtime resources. Usually, these resources can be visit by server through ",(0,r.kt)("inlineCode",{parentName:"p"},"'@shuvi/service/lib/resources'"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"returnType: ",(0,r.kt)("inlineCode",{parentName:"li"},"Resources | Resources[]"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type Resources = [string, string | undefined]\n")))),(0,r.kt)("h3",{id:"addruntimefile"},(0,r.kt)("inlineCode",{parentName:"h3"},"addRuntimeFile")),(0,r.kt)("p",null,"To add runtime files before bundler starts. Usually, these files will be placed under participate in the compiling. These files will be added to ",(0,r.kt)("inlineCode",{parentName:"p"},"./shuvi/app/files")," and could be visited through ",(0,r.kt)("inlineCode",{parentName:"p"},"'@shuvi/app/files/${name}'")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncParallelHook"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"p"},"void"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"p"},"AddRuntimeFileUtils")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type AddRuntimeFileUtils = {\n  createFile: (options: CreateFileOption) => FileOptions;\n  getAllFiles: (dependencies: string | string[]) => string[];\n};\n\ntype CreateFileOption = {\n  name: string;\n  content: () => string;\n  dependencies?: string | string[];\n};\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"returnType: ",(0,r.kt)("inlineCode",{parentName:"p"},"FileOptions | FileOptions[]")))),(0,r.kt)("h3",{id:"addruntimeservice"},(0,r.kt)("inlineCode",{parentName:"h3"},"addRuntimeService")),(0,r.kt)("p",null,"To add runtime services or library for user. These services can be used through ",(0,r.kt)("inlineCode",{parentName:"p"},"'@shuvi/runtime'")," or  ",(0,r.kt)("inlineCode",{parentName:"p"},"'@shuvi/runtime/${filepath}'")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"li"},"AsyncParallelHook")),(0,r.kt)("li",{parentName:"ul"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"li"},"void")),(0,r.kt)("li",{parentName:"ul"},"returnType: ",(0,r.kt)("inlineCode",{parentName:"li"},"RuntimeService | RuntimeService[]"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"type RuntimeService = {\n  source: string;\n  exported: string;\n  filepath?: string;\n};\n")))),(0,r.kt)("h3",{id:"approutes"},(0,r.kt)("inlineCode",{parentName:"h3"},"appRoutes")),(0,r.kt)("p",null,"To modify app routes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"hookType: ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncSeriesWaterfallHook"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"initialValue: ",(0,r.kt)("inlineCode",{parentName:"p"},"IUserRouteConfig"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"p"},"void")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface IUserRouteConfig {\n  children?: IUserRouteConfig[];\n  name?: string;\n  component?: string;\n  middlewares?: string[];\n  redirect?: string;\n  path: string;\n  id?: string;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"extraArg: ",(0,r.kt)("inlineCode",{parentName:"p"},"void")))),(0,r.kt)("h2",{id:"extending-types"},"Extending types"),(0,r.kt)("p",null,"The type of corePlugin hooks can be extended as the following example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="types.d.ts"',title:'"types.d.ts"'},"declare module '@shuvi/runtime' {\n  export interface CustomCorePluginHooks {\n    extendedHookExample: typeof extendedHookExample\n  }\n}\n")))}k.isMDXComponent=!0}}]);