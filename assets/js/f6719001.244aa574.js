"use strict";(self.webpackChunkshuvi_document=self.webpackChunkshuvi_document||[]).push([[9454],{9613:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(9496);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=i(a),d=r,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||o;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5171:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return i},toc:function(){return m}});var n=a(2848),r=a(9213),o=(a(9496),a(9613)),l=["components"],s={id:"router-match-rules",title:"Router Match Rules",sidebar_position:5},p=void 0,i={unversionedId:"guide/Conventional-Routes/router-match-rules",id:"guide/Conventional-Routes/router-match-rules",title:"Router Match Rules",description:"1. A param is denoted by a colon :",source:"@site/docs/guide/Conventional-Routes/router-match-rules.md",sourceDirName:"guide/Conventional-Routes",slug:"/guide/Conventional-Routes/router-match-rules",permalink:"/shuvijs.org/docs/guide/Conventional-Routes/router-match-rules",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/Conventional-Routes/router-match-rules.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"router-match-rules",title:"Router Match Rules",sidebar_position:5},sidebar:"guideSidebar",previous:{title:"On Demand Transpilation",permalink:"/shuvijs.org/docs/guide/Conventional-Routes/On Demand Transpilation"},next:{title:"Fast Refresh",permalink:"/shuvijs.org/docs/guide/Fast Refresh"}},u={},m=[{value:"Custom Regexp in params",id:"custom-regexp-in-params",level:2},{value:"Repeatable params",id:"repeatable-params",level:2},{value:"Optional parameters",id:"optional-parameters",level:2},{value:"Catch all / 404 Not found Route",id:"catch-all--404-not-found-route",level:2},{value:"different between math all",id:"different-between-math-all",level:3},{value:"Debugging",id:"debugging",level:2}],c={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A ",(0,o.kt)("em",{parentName:"li"},"param")," is denoted by a colon ",(0,o.kt)("inlineCode",{parentName:"li"},":"),"  "),(0,o.kt)("li",{parentName:"ol"},"colon ",(0,o.kt)("inlineCode",{parentName:"li"},":")," is ",(0,o.kt)("strong",{parentName:"li"},"necessary")," for ",(0,o.kt)("em",{parentName:"li"},"param"))),(0,o.kt)("p",null,"When a route is matched, the value of its ",(0,o.kt)("em",{parentName:"p"},"params")," will be exposed as ",(0,o.kt)("inlineCode",{parentName:"p"},"params"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const User = {\n  template: '<div>User {{ $route.params.id }}</div>',\n}\n// these are passed to `createRouter`\nconst routes = [\n  // dynamic segments start with a colon\n  { path: '/users/:id', component: User },\n]\n")),(0,o.kt)("p",null,"You can have multiple ",(0,o.kt)("em",{parentName:"p"},"params")," in the same route, and they will map to corresponding fields on ",(0,o.kt)("inlineCode",{parentName:"p"},"params"),". Examples:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"pattern"),(0,o.kt)("th",{parentName:"tr",align:null},"matched path"),(0,o.kt)("th",{parentName:"tr",align:null},"params"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"/users/:username"),(0,o.kt)("td",{parentName:"tr",align:null},"/users/eduardo"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ username: 'eduardo' }"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"/users/:username/posts/:postId"),(0,o.kt)("td",{parentName:"tr",align:null},"/users/eduardo/posts/123"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ username: 'eduardo', postId: '123' }"))))),(0,o.kt)("h2",{id:"custom-regexp-in-params"},"Custom Regexp in params"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const routes = [\n  // /:productName -> matches /o,/p\n  { path: '/:productName' },\n]\n")),(0,o.kt)("p",null,"In some scenarios we don't want to add that static section ",(0,o.kt)("inlineCode",{parentName:"p"},"/o"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"p"),". However, ",(0,o.kt)("inlineCode",{parentName:"p"},"orderId")," is always a number while ",(0,o.kt)("inlineCode",{parentName:"p"},"productName")," can be anything, so we can specify a custom regexp for a param in parentheses:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const routes = [\n  // /:orderId -> matches only numbers\n  { path: '/:orderId(\\\\d+)' },\n  // /:productName -> matches anything else\n  { path: '/:productName' },\n]\n")),(0,o.kt)("p",null,"Now, going to ",(0,o.kt)("inlineCode",{parentName:"p"},"/25")," will match ",(0,o.kt)("inlineCode",{parentName:"p"},"/:orderId")," while going to anything else will match ",(0,o.kt)("inlineCode",{parentName:"p"},"/:productName"),". The order of the ",(0,o.kt)("inlineCode",{parentName:"p"},"routes")," array doesn't even matter!"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Make sure to ",(0,o.kt)("strong",{parentName:"p"},"escape backslashes (","\\",")")," like we did with ",(0,o.kt)("inlineCode",{parentName:"p"},"\\d")," (becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"\\\\d"),") to actually pass the backslash character in a string in JavaScript.")),(0,o.kt)("h2",{id:"repeatable-params"},"Repeatable params"),(0,o.kt)("p",null,"If you need to match routes with multiple sections like ",(0,o.kt)("inlineCode",{parentName:"p"},"/first/second/third"),", you should mark a param as repeatable with ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," (0 or more) and ",(0,o.kt)("inlineCode",{parentName:"p"},"+")," (1 or more):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const routes = [\n  // /:chapters -> matches /one, /one/two, /one/two/three, etc\n  { path: '/:chapters+' },\n  // /:chapters -> matches /, /one, /one/two, /one/two/three, etc\n  { path: '/:chapters*' },\n]\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// given { path: '/:chapters*', name: 'chapters' },\nrouter.resolve({ name: 'chapters', params: { chapters: [] } }).href\n// produces /\nrouter.resolve({ name: 'chapters', params: { chapters: ['a', 'b'] } }).href\n// produces /a/b\n\n// given { path: '/:chapters+', name: 'chapters' },\nrouter.resolve({ name: 'chapters', params: { chapters: [] } }).href\n// throws an Error because `chapters` is empty\n")),(0,o.kt)("p",null,"These can also be combined with custom Regexp by adding them ",(0,o.kt)("strong",{parentName:"p"},"after the closing parentheses"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const routes = [\n  // only match numbers\n  // matches /1, /1/2, etc\n  { path: '/:chapters(\\\\d+)+' },\n  // matches /, /1, /1/2, etc\n  { path: '/:chapters(\\\\d+)*' },\n]\n")),(0,o.kt)("h2",{id:"optional-parameters"},"Optional parameters"),(0,o.kt)("p",null,"You can also mark a parameter as optional by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," modifier (0 or 1):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const routes = [\n  // will match /users and /users/posva\n  { path: '/users/:userId?' },\n  // will match /users and /users/42\n  { path: '/users/:userId(\\\\d+)?' },\n]\n")),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," technically also marks a parameter as optional but ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," parameters cannot be repeated."),(0,o.kt)("h2",{id:"catch-all--404-not-found-route"},"Catch all / 404 Not found Route"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const routes = [\n  // will match /user/... and put it under `$route.params._other`\n  { path: '/user/:_other(.*)', name: 'NotFound', component: NotFound },\n  // will match /user, /user/... and put it under `$route.params._other`\n  { path: '/user/:_other(.*)?', name: 'NotFound', component: NotFound },\n  // will match anything starting with `/user-` and put it under `$route.params.afterUser`\n  { path: '/user-:afterUser(.*)', component: UserGeneric },\n]\n")),(0,o.kt)("h3",{id:"different-between-math-all"},"different between math all"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"pattern"),(0,o.kt)("th",{parentName:"tr",align:null},"matched path"),(0,o.kt)("th",{parentName:"tr",align:null},"\\$route.params"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"/:chapters*"),(0,o.kt)("td",{parentName:"tr",align:null},"/one"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ chapters: ['one'] }"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"/:chapters(.*)"),(0,o.kt)("td",{parentName:"tr",align:null},"/one"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"{ chapters: 'one' }"))))),(0,o.kt)("p",null,"This will give you an array of params instead of a string and will also require you to pass an array when using named routes:"),(0,o.kt)("h2",{id:"debugging"},"Debugging"),(0,o.kt)("p",null,"If you need to dig how your routes are transformed into Regexp to understand why a route isn't being matched or, to report a bug, you can use the ",(0,o.kt)("a",{parentName:"p",href:"https://paths.esm.dev/?p=AAMeJSyAwR4UbFDAFxAcAGAIJXMAAA..#"},"path ranker tool"),". It supports sharing your routes through the URL."))}d.isMDXComponent=!0}}]);