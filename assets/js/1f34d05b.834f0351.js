"use strict";(self.webpackChunkshuvi_document=self.webpackChunkshuvi_document||[]).push([[6767],{9613:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,f=c["".concat(l,".").concat(m)]||c[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4093:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return p}});var r=n(2848),a=n(9213),i=(n(9496),n(9613)),o=["components"],u={sidebar_position:3,id:"Middleware"},l=void 0,s={unversionedId:"guide/Conventional-Routes/Middleware",id:"guide/Conventional-Routes/Middleware",title:"Middleware",description:"Middleware enables you to use code over configuration. This gives you full flexibility in shuvi, because you can run code before a request is completed.",source:"@site/docs/guide/Conventional-Routes/middleware.md",sourceDirName:"guide/Conventional-Routes",slug:"/guide/Conventional-Routes/Middleware",permalink:"/shuvijs.org/docs/guide/Conventional-Routes/Middleware",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/guide/Conventional-Routes/middleware.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,id:"Middleware"},sidebar:"guideSidebar",previous:{title:"Api Routes",permalink:"/shuvijs.org/docs/guide/Conventional-Routes/Api Routes"},next:{title:"On Demand Transpilation",permalink:"/shuvijs.org/docs/guide/Conventional-Routes/On Demand Transpilation"}},d={},p=[{value:"Usage",id:"usage",level:2},{value:"Execution Order",id:"execution-order",level:2},{value:"Config",id:"config",level:2}],c={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Middleware enables you to use code over configuration. This gives you full flexibility in shuvi, because you can run code before a request is completed."),(0,i.kt)("p",null,"Based on the user's incoming request, you can modify the response by rewriting, redirecting, adding headers."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Middleware is created by using a ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware")," function that lives inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware.js")," file."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware.ts")," file under your ",(0,i.kt)("inlineCode",{parentName:"p"},"routes")," directory.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Finally, export a middleware function from the ",(0,i.kt)("inlineCode",{parentName:"p"},"middleware.ts")," file."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"// routes/middleware.ts\n\nimport { RuntimeServer } from '@shuvi/runtime'\n\nexport const middleware:RuntimeServer.IRequestHandlerWithNext = function (req, res, next) {\n  console.log('req.url :', req.url);\n  return next();\n}\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Details of ",(0,i.kt)("inlineCode",{parentName:"p"},"RuntimeServer.IRequestHandlerWithNext")," types is ",(0,i.kt)("a",{parentName:"p",href:"/shuvijs.org/docs/api/runtime/modules/RuntimeServer#irequesthandlerwithnext"},"here"))),(0,i.kt)("h2",{id:"execution-order"},"Execution Order"),(0,i.kt)("p",null,"If your Middleware is created in ",(0,i.kt)("inlineCode",{parentName:"p"},"/src/routes/middleware.ts"),", it will run on all routes within the ",(0,i.kt)("inlineCode",{parentName:"p"},"routes")," directory. The below example assumes you have ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/about/page.tsx")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/teams/page.tsx")," routes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"- package.json\n- /routes\n    middleware.ts # Will run on all routes under /routes\n    page.tsx\n    about\n      page.tsx\n    teams\n      page.tsx\n")),(0,i.kt)("p",null,"If you ",(0,i.kt)("em",{parentName:"p"},"do")," have sub-directories with nested routes, middleware will run from the top down. For example, if you have ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/about/middleware.ts")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"routes/about/team/middleware.ts"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/about")," will run first and then ",(0,i.kt)("inlineCode",{parentName:"p"},"/about/team"),". The below example show how this works with a nested routing structure."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"- package.json\n- /routes\n    page.tsx\n    - /about\n      middleware.ts # Will run first\n      about\n        page.tsx\n      - /teams\n          middleware.ts # Will run second\n          page.tsx\n")),(0,i.kt)("h2",{id:"config"},"Config"),(0,i.kt)("p",null,"You can also define middleware routing in shuvi.config.js."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"example"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// shuvi.config.js\nexport default {\n  middlewareRoutes: [\n    // start with /a\n    {\n      path: '/a/:rest*',\n      middlewares: ['a/m.js']\n    },\n    // only /a/a1\n    {\n      path: '/a/a1',\n      middlewares: ['a/a1/m.js']\n    },\n    // catch all\n    {\n      path: '/',\n      middlewares: ['m.js']\n    }\n  ]\n};\n")))}m.isMDXComponent=!0}}]);